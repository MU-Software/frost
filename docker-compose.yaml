version: "3.8"

name: frost

volumes:
  frost-db-data-volume:
  frost-swagger-docs:

networks:
  frost-network:
    driver: bridge

services:
  frost-db:
    image: postgres:latest
    container_name: frost-db-dev
    restart: unless-stopped
    networks:
      - frost-network
    ports:
      - 5432
    environment:
      - POSTGRES_DB=${DB_NAME:?Please create .env file on project root and set DB_NAME}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:?Please create .env file on project root and set DB_PASSWORD}
    volumes:
      - frost-db-data-volume:/var/lib/postgresql/data/
    healthcheck:
      test: pg_isready -U ${DB_USER:-postgres}

  frost-redis:
    image: redis:latest
    container_name: frost-redis-dev
    networks:
      - frost-network
    ports:
      - 6379
    command: >
      --requirepass ${REDIS_PASSWORD:?Please create .env file on project root and set REDIS_PASSWORD}
    healthcheck:
      # FROM https://stackoverflow.com/a/71504657/5702135
      test: ["CMD-SHELL", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping", "|", "grep", "PONG"]
      interval: 1s
      timeout: 3s
      retries: 5

  frost-celery:
    build:
      context: ../
      dockerfile: docker/Dockerfile
      target: runtime
    container_name: frost-celery-dev
    # command: ["celery", "-A", "app.worker", "worker", "--loglevel=INFO"]
    command: ["supervisord", "-n"]
    env_file:
      - ../.env
    working_dir: /
    networks:
      - frost-network
    depends_on:
      frost-db:
        condition: service_healthy
      frost-redis:
        condition: service_healthy
    healthcheck:
      # test: ["CMD-SHELL", "celery", "inspect", "ping", "-A", "app.worker"]
      test: ["CMD-SHELL", "supervisorctl", "status", "celery", "|", "grep", "RUNNING"]
      interval: 10s
      timeout: 6s
      retries: 5

  frost-cron:
    build:
      context: ../
      dockerfile: docker/Dockerfile
      target: runtime
    container_name: frost-cron-dev
    command: ["bash", "/usr/local/bin/cron_setup.sh"]
    env_file:
      - ../.env
    working_dir: /
    networks:
      - frost-network
    depends_on:
      frost-db:
        condition: service_healthy
      frost-redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "pgrep", "-l", "cron"]
      interval: 1s
      timeout: 6s
      retries: 5

  frost-api-server:
    build:
      context: ../
      dockerfile: docker/Dockerfile
      target: runtime
    container_name: frost-api-server-dev
    command:
      - "/bin/sh"
      - "-c"
      - |
        flask create-openapi-doc
        gunicorn -k eventlet --log-level INFO -b 0.0.0.0:8808 "app:create_app()"
    env_file:
      - ../.env
    tty: true
    working_dir: /
    networks:
      - frost-network
    ports:
      - 8808
    depends_on:
      frost-db:
        condition: service_healthy
      frost-redis:
        condition: service_healthy
      frost-celery:
        condition: service_healthy
      frost-cron:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-sf", "--header", "Host: ${SERVER_NAME}", "--max-time", "5", "http://localhost:8808/api/dev/ping"]
      interval: 1s
      timeout: 6s
      retries: 5
    volumes:
      - frost-swagger-docs:/swagger_ui_dist
      - frost-swagger-docs:/docs

  frost-nginx:
    image: nginx:latest
    container_name: frost-nginx-dev
    networks:
      - frost-network
    ports:
      - 80:8080
      - 443:8443
    depends_on:
      frost-api-server:
        condition: service_healthy
    env_file:
      - ../.env
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d/:/etc/nginx/conf.d/
      - ./nginx/templates/:/etc/nginx/templates/
      - ./nginx/frontend/:/var/www/
      - frost-swagger-docs:/swagger_ui_dist:ro
      - frost-swagger-docs:/docs:ro
